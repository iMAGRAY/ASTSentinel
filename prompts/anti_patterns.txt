# АНТИ-ПАТТЕРНЫ И РЕЖИМЫ ВАЛИДАЦИИ
# Сводка для валидационных ИИ-агентов

## КРИТИЧЕСКИЕ АНТИ-ПАТТЕРНЫ (ВСЕГДА БЛОКИРОВАТЬ):

### 1. Фейковые реализации
- `return true;` / `return "success"` без реальной логики
- Заглушки с комментариями `// Not implemented`, `TODO`, `FIXME` в production коде
- Пустые функции с возвратом константных значений
- Имитация работы через `console.log("выполнено")` без реальных действий

### 2. Скрытие ошибок
- Пустые блоки `catch {}`, `except: pass`, `catch (e) {}`
- Подавление исключений только логированием: `catch (e) { console.log(e) }`
- Игнорирование return кодов ошибок
- Возврат `null`/`undefined` вместо обработки ошибок

### 3. Имитация асинхронности
- `setTimeout(() => {}, 1000)` без полезной работы
- `await new Promise(resolve => setTimeout(resolve, 100))` для "имитации задержки"
- `Thread.sleep()`, `time.sleep()` в production коде без обоснования
- Фейковые `async/await` без реальных асинхронных операций

### 4. Хардкод данных в production
- Статичные массивы/объекты вместо реальных вычислений
- Захардкоженные пути файлов, URL, конфигурации
- Возврат фиксированных результатов в бизнес-логике
- Моковые данные в production коде

### 5. Безопасность и качество
- SQL-инъекции через string concatenation
- Хардкод паролей, токенов, API-ключей
- eval() и подобные конструкции с пользовательскими данными
- Отсутствие валидации входных параметров

## КОНТЕКСТНЫЕ РЕЖИМЫ:

### СТРОГИЙ РЕЖИМ (production, src/, lib/, main):
- Все анти-паттерны блокируются жестко
- Требуется полная реализация функционала
- Обязательна обработка ошибок
- Минимум TODO/FIXME комментариев

### ДОПУСТИМЫЕ УПРОЩЕНИЯ (test/, mock/, example/, demo/, fixtures/, samples/):
- Разрешены заглушки и моки
- Допустимы хардкоженые тестовые данные
- Можно использовать setTimeout для тестов
- Разрешены упрощенные реализации

### ПРЕДУПРЕДИТЕЛЬНЫЙ РЕЖИМ (docs/, scripts/, tools/, utils/):
- Анти-паттерны вызывают предупреждения, но не блокировку
- Допустимы простые скрипты с минимальной обработкой ошибок
- Разрешены TODO для будущих улучшений

## ДЕТЕКЦИЯ КОНТЕКСТА:
- Проверяй путь к файлу для определения режима
- Учитывай название директории и назначение кода
- При сомнениях выбирай более строгий режим
- Обращай внимание на комментарии разработчика о назначении кода

## ИСКЛЮЧЕНИЯ:
- Интерфейсы и абстрактные классы могут содержать заглушки
- Полифиллы и шимы могут иметь упрощенную логику
- Middleware и декораторы могут использовать паттерн "проброса"
- Конфигурационные файлы могут содержать статичные данные