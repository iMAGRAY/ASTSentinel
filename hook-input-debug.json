{"session_id":"506f332d-a175-4459-b886-985f0c0d6313","transcript_path":"C:\\Users\\1\\.claude\\projects\\C--Users-1-Documents-GitHub-ValidationCodeHook\\506f332d-a175-4459-b886-985f0c0d6313.jsonl","cwd":"C:\\Users\\1\\Documents\\GitHub\\ValidationCodeHook","permission_mode":"bypassPermissions","hook_event_name":"PostToolUse","tool_name":"Write","tool_input":{"file_path":"C:\\Users\\1\\Desktop\\quality_test.py","content":"\"\"\"Code with quality issues but no security vulnerabilities\"\"\"\nimport json\nimport logging\n\nlogger = logging.getLogger(__name__)\n\ndef calculate_metrics(data_points, threshold, multiplier, offset, scale_factor, precision, min_value, max_value, normalize):\n    \"\"\"Calculate metrics with too many parameters\"\"\"\n    results = []\n    \n    # Deep nesting example\n    for point in data_points:\n        if point > threshold:\n            if normalize:\n                if point < max_value:\n                    if point > min_value:\n                        normalized = (point - min_value) / (max_value - min_value)\n                        scaled = normalized * scale_factor + offset\n                        results.append(round(scaled * multiplier, precision))\n    \n    return results\n\nclass DataProcessor:\n    \"\"\"Class with various complexity issues\"\"\"\n    \n    def __init__(self):\n        self.data = []\n        self.cache = {}\n        self.magic_number = 42  # Magic number\n        \n    def process_batch(self, items):\n        \"\"\"Process batch with duplicated logic\"\"\"\n        processed = []\n        \n        # First pass - filter\n        for item in items:\n            if item > 10 and item < 100:\n                processed.append(item * 2)\n        \n        # Second pass - same filter (duplicate)\n        for item in items:\n            if item > 10 and item < 100:\n                processed.append(item * 3)\n        \n        return processed\n    \n    def complex_calculation(self, value):\n        \"\"\"Complex method with long expressions\"\"\"\n        # Very long line with complex calculation that should trigger line length validation\n        result = value * 3.14159 + 273.15 - (value / 2.71828) + (value ** 2) / 1.61803 - (value ** 3) / 6.28318 + (value ** 0.5) * 9.80665\n        return result\n    \n    def nested_conditions(self, a, b, c):\n        \"\"\"Method with nested conditions\"\"\"\n        status = \"unknown\"\n        \n        if a > 0:\n            if b > 0:\n                if c > 0:\n                    if a > b:\n                        if b > c:\n                            status = \"descending\"\n                        else:\n                            status = \"mixed\"\n                    else:\n                        status = \"ascending\"\n        \n        return status\n\ndef main():\n    \"\"\"Main function\"\"\"\n    processor = DataProcessor()\n    \n    # Test with sample data\n    test_data = [15, 25, 35, 45, 55, 65, 75, 85, 95]\n    results = processor.process_batch(test_data)\n    \n    # Calculate metrics with many parameters\n    metrics = calculate_metrics(\n        data_points=test_data,\n        threshold=30,\n        multiplier=1.5,\n        offset=10,\n        scale_factor=100,\n        precision=2,\n        min_value=0,\n        max_value=100,\n        normalize=True\n    )\n    \n    logger.info(f\"Processed {len(results)} items\")\n    logger.info(f\"Metrics: {metrics}\")\n    \n    return results\n\nif __name__ == \"__main__\":\n    main()"},"tool_response":{"type":"create","filePath":"C:\\Users\\1\\Desktop\\quality_test.py","content":"\"\"\"Code with quality issues but no security vulnerabilities\"\"\"\nimport json\nimport logging\n\nlogger = logging.getLogger(__name__)\n\ndef calculate_metrics(data_points, threshold, multiplier, offset, scale_factor, precision, min_value, max_value, normalize):\n    \"\"\"Calculate metrics with too many parameters\"\"\"\n    results = []\n    \n    # Deep nesting example\n    for point in data_points:\n        if point > threshold:\n            if normalize:\n                if point < max_value:\n                    if point > min_value:\n                        normalized = (point - min_value) / (max_value - min_value)\n                        scaled = normalized * scale_factor + offset\n                        results.append(round(scaled * multiplier, precision))\n    \n    return results\n\nclass DataProcessor:\n    \"\"\"Class with various complexity issues\"\"\"\n    \n    def __init__(self):\n        self.data = []\n        self.cache = {}\n        self.magic_number = 42  # Magic number\n        \n    def process_batch(self, items):\n        \"\"\"Process batch with duplicated logic\"\"\"\n        processed = []\n        \n        # First pass - filter\n        for item in items:\n            if item > 10 and item < 100:\n                processed.append(item * 2)\n        \n        # Second pass - same filter (duplicate)\n        for item in items:\n            if item > 10 and item < 100:\n                processed.append(item * 3)\n        \n        return processed\n    \n    def complex_calculation(self, value):\n        \"\"\"Complex method with long expressions\"\"\"\n        # Very long line with complex calculation that should trigger line length validation\n        result = value * 3.14159 + 273.15 - (value / 2.71828) + (value ** 2) / 1.61803 - (value ** 3) / 6.28318 + (value ** 0.5) * 9.80665\n        return result\n    \n    def nested_conditions(self, a, b, c):\n        \"\"\"Method with nested conditions\"\"\"\n        status = \"unknown\"\n        \n        if a > 0:\n            if b > 0:\n                if c > 0:\n                    if a > b:\n                        if b > c:\n                            status = \"descending\"\n                        else:\n                            status = \"mixed\"\n                    else:\n                        status = \"ascending\"\n        \n        return status\n\ndef main():\n    \"\"\"Main function\"\"\"\n    processor = DataProcessor()\n    \n    # Test with sample data\n    test_data = [15, 25, 35, 45, 55, 65, 75, 85, 95]\n    results = processor.process_batch(test_data)\n    \n    # Calculate metrics with many parameters\n    metrics = calculate_metrics(\n        data_points=test_data,\n        threshold=30,\n        multiplier=1.5,\n        offset=10,\n        scale_factor=100,\n        precision=2,\n        min_value=0,\n        max_value=100,\n        normalize=True\n    )\n    \n    logger.info(f\"Processed {len(results)} items\")\n    logger.info(f\"Metrics: {metrics}\")\n    \n    return results\n\nif __name__ == \"__main__\":\n    main()","structuredPatch":[]}}