{"session_id":"506f332d-a175-4459-b886-985f0c0d6313","transcript_path":"C:\\Users\\1\\.claude\\projects\\C--Users-1-Documents-GitHub-ValidationCodeHook\\506f332d-a175-4459-b886-985f0c0d6313.jsonl","cwd":"C:\\Users\\1\\Documents\\GitHub\\ValidationCodeHook","permission_mode":"bypassPermissions","hook_event_name":"PostToolUse","tool_name":"Write","tool_input":{"file_path":"C:/Users/1/Desktop/Новая папка (21)/test_quality.rs","content":"// Rust test file for validation hooks\n\nuse std::collections::HashMap;\n\n// Function with too many parameters\nfn process_request(\n    id: u32,\n    name: String,\n    email: String,\n    age: u8,\n    address: String,\n    phone: String,\n    country: String,\n    zipcode: String,\n    is_active: bool,\n) -> HashMap<String, String> {\n    let mut user_data = HashMap::new();\n    user_data.insert(\"id\".to_string(), id.to_string());\n    user_data.insert(\"name\".to_string(), name);\n    user_data.insert(\"email\".to_string(), email);\n    user_data.insert(\"age\".to_string(), age.to_string());\n    user_data.insert(\"address\".to_string(), address);\n    user_data.insert(\"phone\".to_string(), phone);\n    user_data.insert(\"country\".to_string(), country);\n    user_data.insert(\"zipcode\".to_string(), zipcode);\n    user_data.insert(\"is_active\".to_string(), is_active.to_string());\n    user_data\n}\n\n// Deep nesting example\nfn validate_number(n: i32) -> &'static str {\n    if n > 0 {\n        if n < 10 {\n            \"single digit\"\n        } else {\n            if n < 100 {\n                if n < 50 {\n                    if n < 25 {\n                        if n < 15 {\n                            \"small number\"\n                        } else {\n                            \"medium-small\"\n                        }\n                    } else {\n                        \"medium\"\n                    }\n                } else {\n                    \"medium-large\"\n                }\n            } else {\n                \"large\"\n            }\n        }\n    } else {\n        \"non-positive\"\n    }\n}\n\n// High complexity function\nfn calculate_score(level: u32, bonus: u32, multiplier: f64) -> u32 {\n    let base_score = if level < 10 {\n        100\n    } else if level < 20 {\n        200\n    } else if level < 30 {\n        300\n    } else if level < 40 {\n        400\n    } else if level < 50 {\n        500\n    } else {\n        1000\n    };\n    \n    let bonus_points = match bonus {\n        0..=10 => 50,\n        11..=20 => 100,\n        21..=30 => 150,\n        31..=40 => 200,\n        _ => 250,\n    };\n    \n    let final_score = (base_score + bonus_points) as f64 * multiplier;\n    \n    if final_score > 10000.0 {\n        10000\n    } else {\n        final_score as u32\n    }\n}\n\n// Clean function example\nfn add(a: i32, b: i32) -> i32 {\n    a + b\n}\n\n// Another clean function\nfn is_even(n: i32) -> bool {\n    n % 2 == 0\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n    \n    #[test]\n    fn test_add() {\n        assert_eq!(add(2, 3), 5);\n    }\n    \n    #[test]\n    fn test_is_even() {\n        assert!(is_even(4));\n        assert!(!is_even(3));\n    }\n}"},"tool_response":{"type":"create","filePath":"C:/Users/1/Desktop/Новая папка (21)/test_quality.rs","content":"// Rust test file for validation hooks\n\nuse std::collections::HashMap;\n\n// Function with too many parameters\nfn process_request(\n    id: u32,\n    name: String,\n    email: String,\n    age: u8,\n    address: String,\n    phone: String,\n    country: String,\n    zipcode: String,\n    is_active: bool,\n) -> HashMap<String, String> {\n    let mut user_data = HashMap::new();\n    user_data.insert(\"id\".to_string(), id.to_string());\n    user_data.insert(\"name\".to_string(), name);\n    user_data.insert(\"email\".to_string(), email);\n    user_data.insert(\"age\".to_string(), age.to_string());\n    user_data.insert(\"address\".to_string(), address);\n    user_data.insert(\"phone\".to_string(), phone);\n    user_data.insert(\"country\".to_string(), country);\n    user_data.insert(\"zipcode\".to_string(), zipcode);\n    user_data.insert(\"is_active\".to_string(), is_active.to_string());\n    user_data\n}\n\n// Deep nesting example\nfn validate_number(n: i32) -> &'static str {\n    if n > 0 {\n        if n < 10 {\n            \"single digit\"\n        } else {\n            if n < 100 {\n                if n < 50 {\n                    if n < 25 {\n                        if n < 15 {\n                            \"small number\"\n                        } else {\n                            \"medium-small\"\n                        }\n                    } else {\n                        \"medium\"\n                    }\n                } else {\n                    \"medium-large\"\n                }\n            } else {\n                \"large\"\n            }\n        }\n    } else {\n        \"non-positive\"\n    }\n}\n\n// High complexity function\nfn calculate_score(level: u32, bonus: u32, multiplier: f64) -> u32 {\n    let base_score = if level < 10 {\n        100\n    } else if level < 20 {\n        200\n    } else if level < 30 {\n        300\n    } else if level < 40 {\n        400\n    } else if level < 50 {\n        500\n    } else {\n        1000\n    };\n    \n    let bonus_points = match bonus {\n        0..=10 => 50,\n        11..=20 => 100,\n        21..=30 => 150,\n        31..=40 => 200,\n        _ => 250,\n    };\n    \n    let final_score = (base_score + bonus_points) as f64 * multiplier;\n    \n    if final_score > 10000.0 {\n        10000\n    } else {\n        final_score as u32\n    }\n}\n\n// Clean function example\nfn add(a: i32, b: i32) -> i32 {\n    a + b\n}\n\n// Another clean function\nfn is_even(n: i32) -> bool {\n    n % 2 == 0\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n    \n    #[test]\n    fn test_add() {\n        assert_eq!(add(2, 3), 5);\n    }\n    \n    #[test]\n    fn test_is_even() {\n        assert!(is_even(4));\n        assert!(!is_even(3));\n    }\n}","structuredPatch":[]}}