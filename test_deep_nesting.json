{
  "tool_name": "Write",
  "tool_args": {
    "file_path": "test_ast_detectable_issues.py",
    "content": "# Python code with issues that AST analyzer should definitely detect\nimport unused_module\nimport json\n\ndef function_with_many_params(a, b, c, d, e, f, g, h):\n    \"\"\"Function with 8 parameters (should trigger TooManyParameters rule)\"\"\"\n    return a + b + c + d + e + f + g + h\n\ndef deeply_nested_function():\n    \"\"\"Function with deep nesting that should be detected\"\"\"\n    if True:\n        if True:\n            if True:\n                if True:\n                    if True:\n                        if True:\n                            if True:\n                                if True:  # 8 levels deep\n                                    return \"deeply nested\"\n    return None\n\n# Very long line that exceeds 120 characters limit - this line is intentionally very long to test line length detection rules in the AST analyzer system\ndef short_func():\n    return \"short\"\n\ndef test_credentials():\n    \"\"\"Function that should trigger hardcoded credentials detection\"\"\"\n    secret_key = \"this_is_a_very_long_secret_key_that_should_be_detected_by_ast_analyzer_as_hardcoded_credential\"\n    password = \"password123\"  \n    token = \"abcdefghijklmnopqrstuvwxyz123456\"  # 32+ chars should trigger detection\n    return secret_key, password, token\n\ndef sql_injection_risk(user_input):\n    \"\"\"Function with SQL injection risk using assignment\"\"\"\n    query = f\"SELECT * FROM users WHERE id = {user_input}\"  # Should be detected as SQL injection\n    return query"
  },
  "tool_result": {
    "success": true
  },
  "tool_input": {
    "file_path": "test_ast_detectable_issues.py",
    "content": "# Python code with issues that AST analyzer should definitely detect\nimport unused_module\nimport json\n\ndef function_with_many_params(a, b, c, d, e, f, g, h):\n    \"\"\"Function with 8 parameters (should trigger TooManyParameters rule)\"\"\"\n    return a + b + c + d + e + f + g + h\n\ndef deeply_nested_function():\n    \"\"\"Function with deep nesting that should be detected\"\"\"\n    if True:\n        if True:\n            if True:\n                if True:\n                    if True:\n                        if True:\n                            if True:\n                                if True:  # 8 levels deep\n                                    return \"deeply nested\"\n    return None\n\n# Very long line that exceeds 120 characters limit - this line is intentionally very long to test line length detection rules in the AST analyzer system\ndef short_func():\n    return \"short\"\n\ndef test_credentials():\n    \"\"\"Function that should trigger hardcoded credentials detection\"\"\"\n    secret_key = \"this_is_a_very_long_secret_key_that_should_be_detected_by_ast_analyzer_as_hardcoded_credential\"\n    password = \"password123\"  \n    token = \"abcdefghijklmnopqrstuvwxyz123456\"  # 32+ chars should trigger detection\n    return secret_key, password, token\n\ndef sql_injection_risk(user_input):\n    \"\"\"Function with SQL injection risk using assignment\"\"\"\n    query = f\"SELECT * FROM users WHERE id = {user_input}\"  # Should be detected as SQL injection\n    return query"
  }
}