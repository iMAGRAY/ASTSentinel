name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build binaries (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Build
        run: cargo build --release

      - name: Package artifact (Linux)
        if: runner.os == 'Linux'
        id: pkg-linux
        shell: bash
        run: |
          set -euo pipefail
          NAME=linux-x86_64
          mkdir -p dist/$NAME
          cp target/release/pretooluse dist/$NAME/
          cp target/release/posttooluse dist/$NAME/
          cp target/release/userpromptsubmit dist/$NAME/
          mkdir -p dist/$NAME/prompts
          cp -r prompts/* dist/$NAME/prompts/ || true
          (cd dist/$NAME && sha256sum * > SHA256SUMS.txt)
          tar -C dist -czf ast-sentinel-$NAME.tar.gz $NAME
          echo "artifact=ast-sentinel-$NAME.tar.gz" >> $GITHUB_OUTPUT

      - name: Upload artifact (Linux)
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.pkg-linux.outputs.artifact }}
          path: ${{ steps.pkg-linux.outputs.artifact }}

      - name: Package artifact (Windows)
        if: runner.os == 'Windows'
        id: pkg-win
        shell: pwsh
        run: |
          $Name = 'windows-x86_64'
          New-Item -ItemType Directory -Force -Path "dist/$Name" | Out-Null
          Copy-Item target/release/pretooluse.exe "dist/$Name/" -ErrorAction SilentlyContinue
          Copy-Item target/release/posttooluse.exe "dist/$Name/" -ErrorAction SilentlyContinue
          Copy-Item target/release/userpromptsubmit.exe "dist/$Name/" -ErrorAction SilentlyContinue
          New-Item -ItemType Directory -Force -Path "dist/$Name/prompts" | Out-Null
          Copy-Item prompts/* "dist/$Name/prompts/" -Recurse -ErrorAction SilentlyContinue
          Get-ChildItem "dist/$Name" | ForEach-Object { Get-FileHash $_.FullName -Algorithm SHA256 } | ForEach-Object { $_.Hash + '  ' + (Split-Path $_.Path -Leaf) } | Set-Content "dist/$Name/SHA256SUMS.txt"
          Compress-Archive -Path "dist/$Name/*" -DestinationPath "ast-sentinel-$Name.zip" -Force
          "artifact=ast-sentinel-$Name.zip" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Upload artifact (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.pkg-win.outputs.artifact }}
          path: ${{ steps.pkg-win.outputs.artifact }}

  update-badge:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout default branch
        uses: actions/checkout@v4
        with:
          ref: master
      - name: Update release badge with tag
        run: |
          set -euo pipefail
          TAG="${{ github.ref_name }}"
          sed -i "s/>latest</>$TAG</" assets/badges/release.svg
      - name: Commit badge update
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git add assets/badges/release.svg
          git commit -m "docs(badge): update release badge to ${{ github.ref_name }} (@codex)" || echo "no changes"
          git push

  release:
    needs: [build, update-badge]
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: AST Sentinel ${{ github.ref_name }}
          files: |
            artifacts/**
          generate_release_notes: true
          body: |
            AST Sentinel release.

            Documentation:
            - Project overview: README.md
            - Hooks reference: README_HOOKS.md
            - Project structure: docs/PROJECT_STRUCTURE.md
            - Testing guide: docs/TESTING.md
            - AST flags playbook: docs/PLAYBOOK_AST_FLAGS.md
