{
  "tool_name": "Write",
  "tool_args": {
    "file_path": "ast_validation_test.py",
    "content": "# Test file to validate AST analysis rules\nimport os\nimport sys\nimport json\n\n# Function with too many parameters (should trigger TooManyParameters - 8 > 5)\ndef function_with_excessive_params(param1, param2, param3, param4, param5, param6, param7, param8):\n    \"\"\"This function has 8 parameters, exceeding the limit of 5\"\"\"\n    return param1 + param2 + param3 + param4 + param5 + param6 + param7 + param8\n\n# Function with deep nesting (should trigger DeepNesting - 8 levels > 6)\ndef deeply_nested_logic():\n    \"\"\"Deep nesting test - 8 levels deep\"\"\"\n    if True:  # Level 1\n        if True:  # Level 2\n            if True:  # Level 3\n                if True:  # Level 4\n                    if True:  # Level 5\n                        if True:  # Level 6\n                            if True:  # Level 7\n                                if True:  # Level 8 - should trigger warning\n                                    return \"too deep\"\n    return \"not reached\"\n\n# Long line test (should trigger LongLine - exceeds 120 characters)\ndef test_long_lines():\n    # This line is intentionally very long to test the long line detection rule in the AST analyzer - it should definitely exceed 120 characters\n    short_line = \"ok\"\n    return short_line\n\n# Security issues - hardcoded credentials (should trigger HardcodedCredentials)\ndef security_problems():\n    api_key = \"sk-1234567890abcdef1234567890abcdef1234567890\"  # OpenAI-style key\n    secret_token = \"this_is_a_very_long_secret_that_should_be_detected_as_credential\"\n    password = \"admin123password\"\n    return api_key, secret_token, password\n\n# SQL injection risk (should trigger SqlInjection)\ndef database_query_risk(user_id):\n    # F-string with SQL - dangerous pattern\n    query = f\"SELECT * FROM users WHERE id = {user_id} AND status = 'active'\"\n    return query\n\n# Good code - should not trigger any warnings\ndef good_clean_function(data):\n    \"\"\"Well-written function with proper practices\"\"\"\n    if not data:\n        return None\n    \n    # Proper parameterized query approach\n    safe_query = \"SELECT * FROM users WHERE id = ? AND status = ?\"\n    return {\"query\": safe_query, \"params\": [data.get(\"id\"), \"active\"]}\n\n# Mixed complexity - moderate nesting (should be OK - 5 levels <= 6)\ndef moderate_complexity(items):\n    result = []\n    for item in items:  # Level 1\n        if item.get(\"active\"):  # Level 2\n            for category in item.get(\"categories\", []):  # Level 3\n                if category.get(\"enabled\"):  # Level 4\n                    for tag in category.get(\"tags\", []):  # Level 5\n                        result.append(tag)  # Still within limit\n    return result"
  },
  "tool_result": {
    "success": true
  },
  "tool_input": {
    "file_path": "ast_validation_test.py",
    "content": "# Test file to validate AST analysis rules\nimport os\nimport sys\nimport json\n\n# Function with too many parameters (should trigger TooManyParameters - 8 > 5)\ndef function_with_excessive_params(param1, param2, param3, param4, param5, param6, param7, param8):\n    \"\"\"This function has 8 parameters, exceeding the limit of 5\"\"\"\n    return param1 + param2 + param3 + param4 + param5 + param6 + param7 + param8\n\n# Function with deep nesting (should trigger DeepNesting - 8 levels > 6)\ndef deeply_nested_logic():\n    \"\"\"Deep nesting test - 8 levels deep\"\"\"\n    if True:  # Level 1\n        if True:  # Level 2\n            if True:  # Level 3\n                if True:  # Level 4\n                    if True:  # Level 5\n                        if True:  # Level 6\n                            if True:  # Level 7\n                                if True:  # Level 8 - should trigger warning\n                                    return \"too deep\"\n    return \"not reached\"\n\n# Long line test (should trigger LongLine - exceeds 120 characters)\ndef test_long_lines():\n    # This line is intentionally very long to test the long line detection rule in the AST analyzer - it should definitely exceed 120 characters\n    short_line = \"ok\"\n    return short_line\n\n# Security issues - hardcoded credentials (should trigger HardcodedCredentials)\ndef security_problems():\n    api_key = \"sk-1234567890abcdef1234567890abcdef1234567890\"  # OpenAI-style key\n    secret_token = \"this_is_a_very_long_secret_that_should_be_detected_as_credential\"\n    password = \"admin123password\"\n    return api_key, secret_token, password\n\n# SQL injection risk (should trigger SqlInjection)\ndef database_query_risk(user_id):\n    # F-string with SQL - dangerous pattern\n    query = f\"SELECT * FROM users WHERE id = {user_id} AND status = 'active'\"\n    return query\n\n# Good code - should not trigger any warnings\ndef good_clean_function(data):\n    \"\"\"Well-written function with proper practices\"\"\"\n    if not data:\n        return None\n    \n    # Proper parameterized query approach\n    safe_query = \"SELECT * FROM users WHERE id = ? AND status = ?\"\n    return {\"query\": safe_query, \"params\": [data.get(\"id\"), \"active\"]}\n\n# Mixed complexity - moderate nesting (should be OK - 5 levels <= 6)\ndef moderate_complexity(items):\n    result = []\n    for item in items:  # Level 1\n        if item.get(\"active\"):  # Level 2\n            for category in item.get(\"categories\", []):  # Level 3\n                if category.get(\"enabled\"):  # Level 4\n                    for tag in category.get(\"tags\", []):  # Level 5\n                        result.append(tag)  # Still within limit\n    return result"
  }
}